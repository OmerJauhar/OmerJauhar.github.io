<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://ojkhan.tech/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ojkhan.tech/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-11-24T18:17:32+00:00</updated><id>https://ojkhan.tech/feed.xml</id><title type="html">OJ.Khan</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Crabdb A brief Introduction</title><link href="https://ojkhan.tech/blog/2023/crabdb/" rel="alternate" type="text/html" title="Crabdb A brief Introduction"/><published>2023-05-08T20:00:00+00:00</published><updated>2023-05-08T20:00:00+00:00</updated><id>https://ojkhan.tech/blog/2023/crabdb</id><content type="html" xml:base="https://ojkhan.tech/blog/2023/crabdb/"><![CDATA[<p>In this blog post, I will give a brief overview of one of my semester project “crabdb”.It is a simple database written in rust in which i have tried to implement both sql and nosql features by introducing a “mode” option at startup. The main aim of this project for me is to get comfortable with rust and to know about the basic working of a database By the end of this post, we will try to have a basic working database. So, let’s get started!</p> <h1 id="introduction">Introduction</h1> <p>Repo : <a href="https://github.com/OmerJauhar/Crabdb">https://github.com/OmerJauhar/Crabdb</a>. <br/> The basic file structure of the crates will be as following</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-src</span>
    <span class="nt">-main</span>.rs
<span class="nt">-crates</span>
    <span class="nt">-parser</span>
        <span class="nt">-parser</span>.rs
    <span class="nt">-repl</span> 
        <span class="nt">-repl</span>.rs
    <span class="nt">-execution</span> 
        <span class="nt">-execution</span>.rs
</code></pre></div></div> <h1 id="repl">REPl</h1> <p>A REPL (Read-Eval-Print Loop) is a tool that allows developers to interactively experiment with code, allowing them to type in commands and immediately see their output. It works by taking input from the user, interpreting and executing it, and then displaying the result back to the user.</p> <p>In a database context, a REPL can be used to interact with the database by allowing developers to enter commands to query, insert, update or delete data. This makes it a very useful tool for testing and debugging database applications. For example, developers can use a REPL to quickly prototype a new query or test how a specific query will behave under different scenarios.</p> <p>For the REPL, I am using <a href="https://github.com/kkawakam/rustyline">rustyline</a>.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">use</span> <span class="nn">rustyline</span><span class="p">::</span><span class="nn">error</span><span class="p">::</span><span class="n">ReadlineError</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">rustyline</span><span class="p">::{</span><span class="n">DefaultEditor</span><span class="p">,</span> <span class="nb">Result</span><span class="p">};</span>
<span class="k">use</span> <span class="nn">parser</span><span class="p">::</span><span class="nn">parser</span><span class="p">::</span><span class="n">parserftn</span> <span class="p">;</span>
 
<span class="c1">//main function will return a Result Enum </span>
<span class="k">pub</span> <span class="k">fn</span> <span class="nf">replfunction</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="c1">// `()` can be used when no completer is required</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">rl</span> <span class="o">=</span> <span class="nn">DefaultEditor</span><span class="p">::</span><span class="nf">new</span><span class="p">()</span><span class="o">?</span><span class="p">;</span>
    <span class="nd">#[cfg(feature</span> <span class="nd">=</span> <span class="s">"with-file-history"</span><span class="nd">)]</span>
    <span class="c1">//rl.load history return a result enum </span>
    <span class="c1">// err checks if the result is err or ok()</span>
    <span class="k">if</span> <span class="n">rl</span><span class="nf">.load_history</span><span class="p">(</span><span class="s">"history.txt"</span><span class="p">)</span><span class="nf">.is_err</span><span class="p">()</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"No previous history."</span><span class="p">);</span>

    <span class="p">}</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"
                          _         _ _     
                         | |       | | |    
            ___ _ __ __ _| |__   __| | |__  
           / __| '__/ _` | '_ </span><span class="se">\\</span><span class="s"> / _` | '_ </span><span class="se">\\</span><span class="s"> 
          | (__| | | (_| | |_) | (_| | |_) |
           </span><span class="se">\\</span><span class="s">___|_|  </span><span class="se">\\</span><span class="s">__,_|_.__/ </span><span class="se">\\</span><span class="s">__,_|_.__/ 

                                       BY OJ        
"</span><span class="p">);</span>
    <span class="k">loop</span> <span class="p">{</span>
        <span class="c1">// let a = 43 ; </span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
        <span class="k">let</span> <span class="n">readline</span> <span class="o">=</span> <span class="n">rl</span><span class="nf">.readline</span><span class="p">(</span><span class="s">"crabdb &gt;&gt; "</span><span class="p">);</span>
        <span class="k">match</span> <span class="n">readline</span> <span class="p">{</span>
            <span class="nf">Ok</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                <span class="c1">// println!("{}",line);</span>
                <span class="k">match</span> <span class="n">rl</span><span class="nf">.add_history_entry</span><span class="p">(</span><span class="n">line</span><span class="nf">.as_str</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="nf">Ok</span><span class="p">(</span><span class="n">_meow</span><span class="p">)</span> <span class="k">=&gt;</span> 
                    <span class="p">{</span>
                        <span class="c1">// println!("{:?}",meow) ; </span>
                        <span class="nd">println!</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="nf">Err</span><span class="p">(</span><span class="n">error</span><span class="p">)</span><span class="k">=&gt;</span>
                    <span class="p">{</span>
                        <span class="nd">println!</span><span class="p">(</span><span class="s">"{:?}"</span><span class="p">,</span><span class="n">error</span><span class="p">)</span> <span class="p">;</span> 
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="c1">// println!("Line: {}", line);</span>
                <span class="nf">parserftn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">line</span><span class="p">);</span>
            <span class="p">},</span>
            <span class="nf">Err</span><span class="p">(</span><span class="nn">ReadlineError</span><span class="p">::</span><span class="n">Interrupted</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                <span class="nd">println!</span><span class="p">(</span><span class="s">"CTRL-C"</span><span class="p">);</span>
                <span class="k">break</span>
            <span class="p">},</span>
            <span class="nf">Err</span><span class="p">(</span><span class="nn">ReadlineError</span><span class="p">::</span><span class="n">Eof</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                <span class="nd">println!</span><span class="p">(</span><span class="s">"CTRL-D"</span><span class="p">);</span>
                <span class="k">break</span>
            <span class="p">},</span>
            <span class="nf">Err</span><span class="p">(</span><span class="n">err</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span>
                <span class="nd">println!</span><span class="p">(</span><span class="s">"Error: {:?}"</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
                <span class="k">break</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nd">#[cfg(feature</span> <span class="nd">=</span> <span class="s">"with-file-history"</span><span class="nd">)]</span>
    <span class="n">rl</span><span class="nf">.save_history</span><span class="p">(</span><span class="s">"history.txt"</span><span class="p">);</span>
    <span class="nf">Ok</span><span class="p">(())</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="parser">Parser</h1> <p>A parser is used to analyze and interpret input data in a structured way, allowing your Rust database to understand and process commands or queries from users. For parser I am using the sqlparser crate “<a href="https://crates.io/crates/sqlparser">sqlparser</a>”.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="n">ast</span> <span class="o">=</span> <span class="nn">Parser</span><span class="p">::</span><span class="nf">parse_sql</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sql_dialect</span><span class="p">,</span><span class="n">sql_string</span><span class="p">);</span> 
</code></pre></div></div> <p>The parse_sql command takes two parameters the dialect and the string the is returned to use from the repl.<br/> Available dialects in sqlparser are</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AnsiDialect
BigQueryDialect
ClickHouseDialect
GenericDialect
HiveDialect
MsSqlDialect
MySqlDialect
PostgreSqlDialect
RedshiftSqlDialect
SQLiteDialect
SnowflakeDialect
</code></pre></div></div> <p>I am using the AnsiDialect.</p> <p>The Parser::parse_sql function fill return a Result Enum in which “Ok”s variant is a vector with “statement”.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">parse_sql</span><span class="p">(</span>
    <span class="n">dialect</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">dyn</span> <span class="n">Dialect</span><span class="p">,</span>
    <span class="n">sql</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span>
<span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Statement</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">ParserError</span><span class="o">&gt;</span>
</code></pre></div></div> <p>where statement is a enum with “58” variants.We can match on individual variant and use it accordingly.</p> <h2 id="databases-and-tables">Databases and Tables</h2> <p>Inorder to create databases , use them and create tables in them i am using the following structure.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(Debug,Serialize,</span> <span class="nd">Deserialize,Clone)]</span>
<span class="k">struct</span> <span class="n">DataBases</span>  
<span class="p">{</span>
    <span class="n">name</span> <span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="n">tables</span> <span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span>
<span class="p">}</span>

</code></pre></div></div> <p>should have named it DataBase instead of Databases but anyhow, the DatabasesArray will keep a track of the created DataBases by using an array of the above struct.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(Debug</span> <span class="nd">,</span> <span class="nd">Serialize</span> <span class="nd">,</span> <span class="nd">Deserialize)]</span>
<span class="k">struct</span> <span class="n">DatabasesArray</span>
<span class="p">{</span>
    <span class="n">array</span> <span class="p">:</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">DataBases</span><span class="o">&gt;</span> 
<span class="p">}</span>

</code></pre></div></div> <h1 id="disk-management">Disk Management</h1> <p>Initially I thought of using proper Disk Management but since I had a deadline to complete it and my knowledge of Disk Managament was not enough so therefore I am currently goona use serde serialize and deserialize to convert the structures to .json files.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>serde <span class="o">=</span> <span class="o">{</span> version <span class="o">=</span> <span class="s2">"1.0"</span>, features <span class="o">=</span> <span class="o">[</span><span class="s2">"derive"</span><span class="o">]</span> <span class="o">}</span>
</code></pre></div></div> <h1 id="insertfunction">InsertFunction</h1> <p>A quick overview of the parser usage and storing the data can be fetched from the implementation of insert function code.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">Statement</span><span class="p">::</span><span class="n">Insert</span> <span class="p">{</span> <span class="n">or</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">into</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">columns</span><span class="p">,</span> <span class="n">overwrite</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">partitioned</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">after_columns</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">table</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span><span class="n">_</span><span class="p">,</span> <span class="n">returning</span><span class="p">:</span><span class="n">_</span> <span class="p">}</span>  <span class="k">=&gt;</span>
<span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">finalvector</span> <span class="o">=</span> <span class="nn">Vec</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
    <span class="k">match</span> <span class="o">*</span><span class="n">source</span><span class="py">.body</span><span class="p">{</span>
        <span class="nn">SetExpr</span><span class="p">::</span><span class="nf">Values</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="k">=&gt;</span>
        <span class="p">{</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">values</span><span class="p">);</span>
            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">values</span><span class="py">.rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="nf">.clone</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">finalvector</span><span class="nf">.push</span><span class="p">(</span><span class="n">i</span><span class="nf">.to_string</span><span class="p">());</span>               
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{}</span>
    <span class="p">}</span>
    <span class="k">let</span> <span class="n">tablename</span> <span class="o">=</span> <span class="n">table_name</span><span class="na">.0</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="py">.value</span><span class="nf">.clone</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">boolvar</span> <span class="o">=</span> <span class="k">false</span> <span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">contents1</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">file</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">open</span><span class="p">(</span><span class="s">"current.txt"</span><span class="p">);</span>
    <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">file</span> 
    <span class="p">{</span>
        <span class="nf">Ok</span><span class="p">(</span><span class="n">file_unwrapped</span><span class="p">)</span> <span class="k">=&gt;</span>
        <span class="p">{</span>
            <span class="k">match</span> <span class="n">file_unwrapped</span><span class="nf">.read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">contents1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span> 
                <span class="p">{</span>
                    <span class="k">if</span> <span class="n">contents1</span> <span class="o">==</span> <span class="nn">String</span><span class="p">::</span><span class="nf">from</span><span class="p">(</span><span class="s">"DEFAULT"</span><span class="p">){</span>
                        <span class="nd">println!</span><span class="p">(</span><span class="s">"No Database Selected "</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="k">else</span>  <span class="p">{</span>
                        <span class="k">let</span> <span class="k">mut</span> <span class="n">fileread</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">open</span><span class="p">(</span><span class="s">"person.json"</span><span class="p">);</span>
                        <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">fileread</span> <span class="p">{</span>
                            <span class="nf">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="k">=&gt;</span>
                            <span class="p">{</span>
                                <span class="k">let</span> <span class="k">mut</span> <span class="n">contents</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
                                <span class="n">file</span><span class="nf">.read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                                <span class="k">let</span> <span class="n">read_database_array</span> <span class="p">:</span><span class="n">DatabasesArray</span> <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                                 <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">read_database_array</span><span class="py">.array</span><span class="nf">.iter</span><span class="p">()</span>
                                 <span class="p">{</span> 
                                    <span class="k">if</span> <span class="n">i</span><span class="py">.name</span> <span class="o">==</span> <span class="n">contents1</span> 
                                    <span class="p">{</span>
                                        <span class="c1">// println!("Table do exists");</span>
                                        <span class="n">boolvar</span> <span class="o">=</span> <span class="k">true</span> <span class="p">;</span> 
                                        <span class="k">break</span><span class="p">;</span>
                                    <span class="p">}</span>
                                 <span class="p">}</span>
                                
                            <span class="p">}</span>
                            <span class="nf">Err</span><span class="p">(</span><span class="n">errormsg</span> <span class="p">)</span> <span class="k">=&gt;</span>
                            <span class="p">{</span>
                                <span class="nd">println!</span><span class="p">(</span><span class="s">"Inside error"</span><span class="p">);</span>
                                <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errormsg</span><span class="p">);</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="nf">Err</span><span class="p">(</span><span class="n">errorstatement</span><span class="p">)</span> <span class="k">=&gt;</span>
                <span class="p">{</span>
                    <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errorstatement</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">Err</span><span class="p">(</span><span class="n">errorstatement</span><span class="p">)</span> <span class="k">=&gt;</span>
        <span class="p">{</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errorstatement</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">boolvar</span>
    <span class="p">{</span>
        <span class="k">let</span> <span class="n">filepath</span> <span class="o">=</span> <span class="n">tablename</span> <span class="o">+</span><span class="s">".json"</span><span class="p">;</span>
        <span class="k">let</span> <span class="k">mut</span> <span class="n">fileread</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">open</span><span class="p">(</span><span class="n">filepath</span><span class="nf">.clone</span><span class="p">());</span>
            <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">fileread</span> <span class="p">{</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="k">=&gt;</span>
                <span class="p">{</span>
                    <span class="k">let</span> <span class="k">mut</span> <span class="n">contents</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
                    <span class="c1">// file.read_to_string(&amp;mut contents).unwrap();</span>
                    <span class="n">file</span><span class="nf">.read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                    <span class="k">let</span> <span class="k">mut</span> <span class="n">read_table</span> <span class="p">:</span><span class="n">Table</span> <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                    <span class="n">read_table</span><span class="nf">.insert</span><span class="p">(</span><span class="n">finalvector</span><span class="p">);</span>
                    <span class="k">let</span> <span class="k">mut</span> <span class="n">filewrite</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">create</span><span class="p">(</span><span class="n">filepath</span><span class="p">);</span>
                                             <span class="n">file</span><span class="nf">.set_len</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                                             <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">filewrite</span> 
                                             <span class="p">{</span>
                                                 <span class="nf">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="k">=&gt;</span> 
                                                 <span class="p">{</span>
                                                     <span class="k">let</span> <span class="n">serialized_parser_database_array</span>  <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read_table</span><span class="p">);</span>
                                                     <span class="k">match</span> <span class="o">&amp;</span><span class="n">serialized_parser_database_array</span>
                                                     <span class="p">{</span>
                                                         <span class="nf">Ok</span><span class="p">(</span><span class="n">spda_string</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                         <span class="p">{</span>
                                                             <span class="k">match</span> <span class="n">file</span><span class="nf">.write_all</span><span class="p">(</span><span class="n">spda_string</span><span class="nf">.as_bytes</span><span class="p">())</span> 
                                                             <span class="p">{</span>
                                                                 <span class="nf">Ok</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                                 <span class="p">{</span>
                                                                    <span class="nd">println!</span><span class="p">(</span><span class="s">"Sucessful"</span><span class="p">);</span>
                                                                 <span class="p">}</span>
                                                                 <span class="nf">Err</span><span class="p">(</span><span class="n">errormsg</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                                 <span class="p">{</span>   
                                                                     <span class="nd">println!</span><span class="p">(</span><span class="s">"error : {}"</span><span class="p">,</span><span class="n">errormsg</span><span class="p">);</span>
                                                                 <span class="p">}</span>
                                                             <span class="p">}</span>
                                                         <span class="p">}</span>
                                                         <span class="nf">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                         <span class="p">{</span>
                                                             <span class="nd">println!</span><span class="p">(</span><span class="s">"Error at serde_json"</span><span class="p">);</span>
                                                         <span class="p">}</span>
                                                     <span class="p">}</span>
                                                 <span class="p">}</span>
                                                 <span class="nf">Err</span><span class="p">(</span><span class="n">errorstatement</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errorstatement</span><span class="p">)}</span>
                <span class="p">}</span>
                <span class="nf">Err</span><span class="p">(</span><span class="n">errorstatement</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span><span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errorstatement</span><span class="p">)}</span>
    
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h3>=&gt;</h3> <p>Since I found it hard to use static mutable global variables in rust therefore i am using basic file handling to create a file “current.txt” and store the current database being use in it by default it will have “DEFAULT”.</p> <h3 id="-1">=&gt;</h3> <p>Initially in the above code i am checking whether a database is selected and the table exists or not. <br/> Afterwards i am deserializing the data into the Table struct, erasing the file , inserting new data and than rewriting the file.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="k">mut</span> <span class="n">contents</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
<span class="n">file</span><span class="nf">.read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
<span class="k">let</span> <span class="k">mut</span> <span class="n">read_table</span> <span class="p">:</span><span class="n">Table</span> <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
<span class="n">read_table</span><span class="nf">.insert</span><span class="p">(</span><span class="n">finalvector</span><span class="p">);</span>
</code></pre></div></div> <p>Serializing it and rewriting it here</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">filewrite</span> 
                                             
<span class="nf">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="k">=&gt;</span> 
<span class="p">{</span>
    <span class="k">let</span> <span class="n">serialized_parser_database_array</span>  <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read_table</span><span class="p">);</span>
    <span class="k">match</span> <span class="o">&amp;</span><span class="n">serialized_parser_database_array</span>
    <span class="p">{</span>
        <span class="nf">Ok</span><span class="p">(</span><span class="n">spda_string</span><span class="p">)</span> <span class="k">=&gt;</span>
        <span class="p">{</span>
            <span class="k">match</span> <span class="n">file</span><span class="nf">.write_all</span><span class="p">(</span><span class="n">spda_string</span><span class="nf">.as_bytes</span><span class="p">())</span> 
            <span class="p">{</span>
                <span class="nf">Ok</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span>
                <span class="p">{</span>
                   <span class="nd">println!</span><span class="p">(</span><span class="s">"Sucessful"</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nf">Err</span><span class="p">(</span><span class="n">errormsg</span><span class="p">)</span> <span class="k">=&gt;</span>
                <span class="p">{</span>   
                    <span class="nd">println!</span><span class="p">(</span><span class="s">"error : {}"</span><span class="p">,</span><span class="n">errormsg</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span>
        <span class="p">{</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"Error at serde_json"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Whereas inorder to store the table data i am generating a .json file on the name of the table and again serializing and deserializing the Table struct (Table struct will be explained in execution crate)</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">boolvar</span>
<span class="p">{</span>
    <span class="k">let</span> <span class="n">filepath</span> <span class="o">=</span> <span class="n">tablename</span> <span class="o">+</span><span class="s">".json"</span><span class="p">;</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">fileread</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">open</span><span class="p">(</span><span class="n">filepath</span><span class="nf">.clone</span><span class="p">());</span>
        <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">fileread</span> <span class="p">{</span>
            <span class="nf">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="k">=&gt;</span>
            <span class="p">{</span>
                <span class="k">let</span> <span class="k">mut</span> <span class="n">contents</span> <span class="o">=</span> <span class="nn">String</span><span class="p">::</span><span class="nf">new</span><span class="p">();</span>
                <span class="c1">// file.read_to_string(&amp;mut contents).unwrap();</span>
                <span class="n">file</span><span class="nf">.read_to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                <span class="k">let</span> <span class="k">mut</span> <span class="n">read_table</span> <span class="p">:</span><span class="n">Table</span> <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">from_str</span><span class="p">(</span><span class="o">&amp;</span><span class="n">contents</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                <span class="n">read_table</span><span class="nf">.insert</span><span class="p">(</span><span class="n">finalvector</span><span class="p">);</span>
                <span class="k">let</span> <span class="k">mut</span> <span class="n">filewrite</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">create</span><span class="p">(</span><span class="n">filepath</span><span class="p">);</span>
                                         <span class="n">file</span><span class="nf">.set_len</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                                         <span class="k">match</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">filewrite</span> 
                                         <span class="p">{</span>
                                             <span class="nf">Ok</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="k">=&gt;</span> 
                                             <span class="p">{</span>
                                                 <span class="k">let</span> <span class="n">serialized_parser_database_array</span>  <span class="o">=</span> <span class="nn">serde_json</span><span class="p">::</span><span class="nf">to_string</span><span class="p">(</span><span class="o">&amp;</span><span class="n">read_table</span><span class="p">);</span>
                                                 <span class="k">match</span> <span class="o">&amp;</span><span class="n">serialized_parser_database_array</span>
                                                 <span class="p">{</span>
                                                     <span class="nf">Ok</span><span class="p">(</span><span class="n">spda_string</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                     <span class="p">{</span>
                                                         <span class="k">match</span> <span class="n">file</span><span class="nf">.write_all</span><span class="p">(</span><span class="n">spda_string</span><span class="nf">.as_bytes</span><span class="p">())</span> 
                                                         <span class="p">{</span>
                                                             <span class="nf">Ok</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                             <span class="p">{</span>
                                                                <span class="nd">println!</span><span class="p">(</span><span class="s">"Sucessful"</span><span class="p">);</span>
                                                             <span class="p">}</span>
                                                             <span class="nf">Err</span><span class="p">(</span><span class="n">errormsg</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                             <span class="p">{</span>   
                                                                 <span class="nd">println!</span><span class="p">(</span><span class="s">"error : {}"</span><span class="p">,</span><span class="n">errormsg</span><span class="p">);</span>
                                                             <span class="p">}</span>
                                                         <span class="p">}</span>
                                                     <span class="p">}</span>
                                                     <span class="nf">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">=&gt;</span>
                                                     <span class="p">{</span>
                                                         <span class="nd">println!</span><span class="p">(</span><span class="s">"Error at serde_json"</span><span class="p">);</span>
                                                     <span class="p">}</span>
                                                 <span class="p">}</span>
                                             <span class="p">}</span>
                                             <span class="nf">Err</span><span class="p">(</span><span class="n">errorstatement</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span> <span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errorstatement</span><span class="p">)}</span>
            <span class="p">}</span>
            <span class="nf">Err</span><span class="p">(</span><span class="n">errorstatement</span><span class="p">)</span> <span class="k">=&gt;</span> <span class="p">{</span><span class="nd">println!</span><span class="p">(</span><span class="s">"{}"</span><span class="p">,</span><span class="n">errorstatement</span><span class="p">)}</span>

<span class="p">}</span>

</code></pre></div></div> <p>Where boolvar will be true only if the database is selected and the table do exist.</p> <h1 id="execution">Execution</h1> <p>Since I am planning to shift to disk management in the future therefore i am using a B-Tree for better indexing. <br/> The following structure is inspired by Johnscode in his project of building a database.</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[derive(Debug,Clone</span> <span class="nd">,</span> <span class="nd">Serialize,</span> <span class="nd">Deserialize)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Column</span> 
<span class="p">{</span>
   <span class="k">pub</span> <span class="n">name</span> <span class="p">:</span><span class="nb">String</span>
<span class="p">}</span>

<span class="nd">#[derive(Debug,</span> <span class="nd">Clone,</span> <span class="nd">Default,</span> <span class="nd">Serialize,</span> <span class="nd">Deserialize)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">Table</span> <span class="p">{</span>
    <span class="cd">/// row id to row</span>
    <span class="n">rows</span><span class="p">:</span> <span class="n">BTreeMap</span><span class="o">&lt;</span><span class="nb">usize</span><span class="p">,</span> <span class="n">StoredRow</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="cd">/// Column info for all columns in the table</span>
    <span class="n">columns</span><span class="p">:</span> <span class="n">ColumnInfo</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div> <p>Table struct. It has two fields, rows and columns. rows is a BTreeMap that maps a row ID to a StoredRow, while columns is a ColumnInfo struct that contains information about all the columns in the table. <br/> where stored row and ColumnInfo are</p> <div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">type</span> <span class="n">StoredRow</span> <span class="o">=</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nb">String</span><span class="o">&gt;</span><span class="p">;</span>
<span class="k">type</span> <span class="n">ColumnInfo</span> <span class="o">=</span> <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">Column</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div> <p><img src="/gt.jpg" alt="alt text"/></p> <p>## =&gt; Implementation of all the functions and the full code can be viewed from the github repo</p> <h2 id="installation-and-running">Installation and Running</h2> <p>Refer to the readme.md file of the github repo . <br/> Repo : <a href="https://github.com/OmerJauhar/Crabdb">https://github.com/OmerJauhar/Crabdb</a>.</p> <h1 id="todos">TODOs</h1> <h4 id="--implement-delete-and-update-queries">* Implement Delete and update queries</h4> <h4 id="--implement-disk-management-for-sql-mode">* Implement Disk Management for “sql mode”</h4> <h4 id="--make-the-parser-more-flexible-by-accepting-nosqlsql-interchangeable-terms">* Make the parser more flexible by accepting nosql/sql interchangeable terms</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Table &lt;<span class="o">==&gt;</span> Collection
Tuple/row &lt;<span class="o">==&gt;</span> Document 
Column &lt;<span class="o">==&gt;</span> Field 

</code></pre></div></div> <h4 id="--implement-primary-and-foreign-key-concept">* Implement Primary and Foreign key concept.</h4> <h4 id="--remove-warning-from-current-code">* Remove warning from current code</h4> <h4 id="--implement-error-handling-with-miette">* Implement error handling with miette</h4> <h1 id="working-commands">Working Commands</h1> <p>Currently the following commands are working</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create database <span class="o">[</span>database name] 
use <span class="o">[</span>database name]
show databases 
show tables 
create table commands  
insert table commands 
drop table commands 
Select commands 

</code></pre></div></div> <h1 id="wrap-up">Wrap Up</h1> <p>As this was my first time working on a project in rust therefore any suggestions will be highly encouraged. Thanks for reading!<br/> Good Bye!</p>]]></content><author><name></name></author><category term="Rust"/><category term="Crabdb"/><summary type="html"><![CDATA[CrabDB is an open-source database management system developed in Rust that provides both SQL and NoSQL features through separate modes.]]></summary></entry></feed>